// Generated by CoffeeScript 1.6.2
var TscCompiler,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TscCompiler = (function() {
  function TscCompiler() {
    var _this = this;

    this.files = {};
    this.tsc = require('./tsc');
    this.tsc.IO.writeFile = function() {};
    this.tsc.IO.createFile = function(name) {
      var files, result;

      result = '';
      files = _this.files;
      return {
        Write: function(txt) {
          return result = result + txt;
        },
        WriteLine: function(txt) {
          return result = result + txt + '\n';
        },
        Close: function() {
          return files[name] = result;
        }
      };
    };
    this.tsc.IO.quit = function() {};
    this.tsc.IO.getExecutingFilePath = function() {
      return __dirname + '/out';
    };
    this.compiler = new this.tsc.BatchCompiler(this.tsc.IO);
  }

  TscCompiler.prototype.compile = function(filename) {
    filename = filename.trim();
    this.tsc.IO["arguments"] = [filename];
    return this.compiler.batchCompile();
  };

  return TscCompiler;

})();

module.exports = function(BasePlugin) {
  var tscPlugin, _ref;

  return tscPlugin = (function(_super) {
    __extends(tscPlugin, _super);

    function tscPlugin() {
      _ref = tscPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    tscPlugin.prototype.name = 'tsc';

    tscPlugin.prototype.render = function(opts) {
      var file, fullPath, inExtension, name, outExtension, templateData;

      inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, file = opts.file;
      if ((inExtension === 'ts') && (outExtension === 'js' || outExtension === null)) {
        this.tsc = new TscCompiler();
        fullPath = file.get('fullPath');
        this.tsc.compile(fullPath);
        name = fullPath.replace(/\.ts$/, '.js');
        opts.content = this.tsc.files[name];
        delete this.tsc.files[name];
      }
    };

    return tscPlugin;

  })(BasePlugin);
};
