// Generated by CoffeeScript 1.8.0
(function() {
  var MongoClient, TaskGroup, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MongoClient = require("mongodb").MongoClient;

  TaskGroup = require('taskgroup').TaskGroup;

  _ = require('lodash');

  module.exports = function(BasePlugin) {
    var MongodbPlugin;
    return MongodbPlugin = (function(_super) {
      __extends(MongodbPlugin, _super);

      function MongodbPlugin() {
        return MongodbPlugin.__super__.constructor.apply(this, arguments);
      }

      MongodbPlugin.prototype.name = 'mongodb';

      MongodbPlugin.prototype.config = {
        collectionDefaults: {
          connectionString: process.env.MONGOLAB_URI || process.env.MONGOHQ_URL || "mongodb://localhost/localdev",
          relativeDirPath: null,
          extension: ".json",
          injectDocumentHelper: null,
          collectionName: "mongodb",
          sort: null,
          meta: {},
          query: {},
          docpadCollectionName: null
        },
        collections: []
      };

      MongodbPlugin.prototype.setConfig = function() {
        var config;
        MongodbPlugin.__super__.setConfig.apply(this, arguments);
        config = this.getConfig();
        config.collections = config.collections.map(function(collection) {
          return _.defaults(collection, config.collectionDefaults);
        });
        return this;
      };

      MongodbPlugin.prototype.getBasePath = function(collectionConfig) {
        return "" + (collectionConfig.relativeDirPath || collectionConfig.collectionName) + "/";
      };

      MongodbPlugin.prototype.fetchMongodbCollection = function(collectionConfig, next) {
        MongoClient.connect(collectionConfig.connectionString, function(err, db) {
          if (err) {
            return next(err);
          }
          return db.collection(collectionConfig.collectionName).find(collectionConfig.query).toArray(function(err, mongoDocs) {
            db.close();
            return next(err, mongoDocs);
          });
        });
        return this;
      };

      MongodbPlugin.prototype.mongoDocToDocpadDoc = function(collectionConfig, mongoDoc, next) {
        var docpad, document, documentAttributes, id, _ref;
        docpad = this.docpad;
        id = mongoDoc._id.toString();
        documentAttributes = {
          data: JSON.stringify(mongoDoc, null, '\t'),
          meta: _.defaults({}, collectionConfig.meta, {
            mongoId: id,
            mongodbCollection: collectionConfig.collectionName,
            relativePath: "" + (this.getBasePath(collectionConfig)) + id + collectionConfig.extension,
            original: mongoDoc
          }, mongoDoc)
        };
        document = docpad.getFile({
          mongoId: id
        });
        if (document != null) {
          document.set(documentAttributes);
        } else {
          document = docpad.createDocument(documentAttributes);
        }
        if ((_ref = collectionConfig.injectDocumentHelper) != null) {
          _ref.call(this, document);
        }
        document.action('load', function(err) {
          if (err) {
            return next(err, document);
          }
          (typeof docpad.addModel === "function" ? docpad.addModel(document) : void 0) || docpad.getDatabase().add(document);
          return next(null, document);
        });
        return document;
      };

      MongodbPlugin.prototype.addMongoCollectionToDb = function(collectionConfig, next) {
        var docpad, plugin;
        docpad = this.docpad;
        plugin = this;
        return plugin.fetchMongodbCollection(collectionConfig, function(err, mongoDocs) {
          var docTasks;
          if (err) {
            return next(err);
          }
          docpad.log('debug', "Retrieved " + mongoDocs.length + " mongo in collection " + collectionConfig.collectionName + ", converting to DocPad docs...");
          docTasks = new TaskGroup({
            concurrency: 0
          }).done(function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', "Converted " + mongoDocs.length + " mongo documents into DocPad docs...");
            return next();
          });
          mongoDocs.forEach(function(mongoDoc) {
            return docTasks.addTask(function(complete) {
              docpad.log('debug', "Inserting " + mongoDoc._id + " into DocPad database...");
              return plugin.mongoDocToDocpadDoc(collectionConfig, mongoDoc, function(err) {
                if (err) {
                  return complete(err);
                }
                docpad.log('debug', 'inserted');
                return complete();
              });
            });
          });
          return docTasks.run();
        });
      };

      MongodbPlugin.prototype.populateCollections = function(opts, next) {
        var collectionTasks, config, docpad, plugin;
        plugin = this;
        docpad = this.docpad;
        config = this.getConfig();
        docpad.log('info', "Importing MongoDB collection(s)...");
        collectionTasks = new TaskGroup({
          concurrency: 0
        }).done(function(err) {
          if (err) {
            return next(err);
          }
          docpad.log('info', "Imported all mongodb docs...");
          return next();
        });
        config.collections.forEach(function(collectionConfig) {
          return collectionTasks.addTask(function(complete) {
            return plugin.addMongoCollectionToDb(collectionConfig, function(err) {
              var docs;
              if (err) {
                complete(err);
              }
              docs = docpad.getFiles({
                mongodbCollection: collectionConfig.collectionName
              }, collectionConfig.sort);
              docpad.setCollection(collectionConfig.docpadCollectionName || collectionConfig.collectionName, docs);
              docpad.log('info', "Created DocPad collection \"" + collectionConfig.collectionName + "\" with " + docs.length + " documents from MongoDB");
              return complete();
            });
          });
        });
        collectionTasks.run();
        return this;
      };

      return MongodbPlugin;

    })(BasePlugin);
  };

}).call(this);
