// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(BasePlugin) {
    var ContentfulPlugin, S, TaskGroup, W, _, client, config, contentful, errors, path, pluralize, querystring, td;
    _ = require('lodash');
    W = require('when');
    S = require('string');
    path = require('path');
    contentful = require('contentful');
    pluralize = require('pluralize');
    querystring = require('querystring');
    TaskGroup = require('taskgroup').TaskGroup;
    errors = {
      no_token: 'Missing required options for roots-contentful. Please ensure `access_token` and `space_id` are present.',
      no_type_id: 'One or more of your content types is missing an `id` value',
      sys_conflict: 'One of your content types has `sys` as a field. This is reserved for storing Contentful system metadata, please rename this field to a different value.'
    };
    config = null;
    client = null;
    td = null;
    return ContentfulPlugin = (function(superClass) {
      var asset_view_helper;

      extend(ContentfulPlugin, superClass);

      function ContentfulPlugin() {
        return ContentfulPlugin.__super__.constructor.apply(this, arguments);
      }

      ContentfulPlugin.prototype.name = 'contentful';

      ContentfulPlugin.prototype.config = {
        collectionDefaults: {
          connectionString: null,
          relativeDirPath: null,
          extension: ".json",
          injectDocumentHelper: null,
          collectionName: "contentful",
          contentTypeId: null,
          sort: null,
          meta: {},
          filters: []
        },
        collections: []
      };

      ContentfulPlugin.prototype.setConfig = function() {
        ContentfulPlugin.__super__.setConfig.apply(this, arguments);
        config = this.getConfig();
        config.collections = config.collections.map(function(collection) {
          return _.defaults(collection, config.collectionDefaults);
        });
        return this;
      };

      ContentfulPlugin.prototype.getBasePath = function(collectionConfig) {
        return (collectionConfig.relativeDirPath || collectionConfig.collectionName) + "/";
      };

      ContentfulPlugin.prototype.fetchContentfulCollection = function(collectionConfig, next) {
        client = contentful.createClient({
          accessToken: collectionConfig.accessToken,
          space: collectionConfig.spaceId
        });
        client.entries(collectionConfig.filters, function(err, contentfulDocs) {
          return next(err, contentfulDocs);
        });
        return this;
      };

      ContentfulPlugin.prototype.contentfulDocToDocpadDoc = function(collectionConfig, contentfulDoc, next) {
        var docpad, document, documentAttributes, id, ref;
        docpad = this.docpad;
        id = contentfulDoc.sys.id.toString();
        documentAttributes = {
          data: JSON.stringify(contentfulDoc, null, '\t'),
          meta: _.defaults({}, collectionConfig.meta, {
            contenfulId: id,
            contentfulCollection: collectionConfig.collectionName,
            relativePath: "" + (this.getBasePath(collectionConfig)) + id + collectionConfig.extension,
            original: contentfulDoc
          }, contentfulDoc)
        };
        document = docpad.getFile({
          contentfulId: id
        });
        if (document != null) {
          document.set(documentAttributes);
        } else {
          document = docpad.createDocument(documentAttributes);
        }
        if ((ref = collectionConfig.injectDocumentHelper) != null) {
          ref.call(this, document);
        }
        document.action('load', function(err) {
          if (err) {
            return next(err, document);
          }
          (typeof docpad.addModel === "function" ? docpad.addModel(document) : void 0) || docpad.getDatabase().add(document);
          return next(null, document);
        });
        return document;
      };

      ContentfulPlugin.prototype.addContentfulCollectionToDb = function(collectionConfig, next) {
        var docpad, plugin;
        docpad = this.docpad;
        plugin = this;
        return plugin.fetchContentfulCollection(collectionConfig, function(err, contentfulDocs) {
          var docTasks;
          if (err) {
            return next(err);
          }
          docpad.log('debug', "Retrieved " + contentfulDocs.length + " entry in collection " + collectionConfig.collectionName + ", converting to DocPad docs...");
          docTasks = new TaskGroup({
            concurrency: 0
          }).done(function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', "Converted " + contentfulDocs.length + " entry documents into DocPad docs...");
            return next();
          });
          contentfulDocs.forEach(function(contentfulDoc) {
            return docTasks.addTask(function(complete) {
              docpad.log('debug', "Inserting " + contentfulDoc.sys.id + " into DocPad database...");
              return plugin.contentfulDocToDocpadDoc(collectionConfig, contentfulDoc, function(err) {
                if (err) {
                  return complete(err);
                }
                docpad.log('debug', 'inserted');
                return complete();
              });
            });
          });
          return docTasks.run();
        });
      };

      ContentfulPlugin.prototype.populateCollections = function(opts, next) {
        var collectionTasks, docpad, plugin;
        plugin = this;
        docpad = this.docpad;
        config = this.getConfig();
        docpad.log('info', "Importing Contentful collection(s)...");
        collectionTasks = new TaskGroup({
          concurrency: 0
        }).done(function(err) {
          if (err) {
            return next(err);
          }
          docpad.log('info', "Imported all contentful docs...");
          return next();
        });
        config.collections.forEach(function(collectionConfig) {
          return collectionTasks.addTask(function(complete) {
            return plugin.addContentfulCollectionToDb(collectionConfig, function(err) {
              var docs;
              if (err) {
                complete(err);
              }
              docs = docpad.getFiles({
                contentfulCollection: collectionConfig.collectionName
              }, collectionConfig.sort);
              docpad.setCollection(collectionConfig.collectionName, docs);
              docpad.log('info', "Created DocPad collection \"" + collectionConfig.collectionName + "\" with " + docs.length + " documents from Contenful");
              return complete();
            });
          });
        });
        collectionTasks.run();
        return this;
      };


      /**
      		 * Configures content types set in app.coffee. Sets default values if
      		 * optional config options are missing.
      		 * @param {Array} types - content_types set in app.coffee extension config
      		 * @return {Promise} - returns an array of configured content types
       */


      /**
      		 * Reconfigures content types set in app.coffee using an object instead of
      		 * an array. The keys of the object set as the `name` option in the config
      		 * @param {Object} types - content_types set in app.coffee extension config
      		 * @return {Promise} - returns an array of content types
       */


      /**
      		 * Fetches data from Contentful for content types, and formats the raw data
      		 * @param {Array} types - configured content_type objects
      		 * @return {Promise} - returns formatted locals object with all content
       */


      /**
      		 * Fetch entries for a single content type object
      		 * @param {Object} type - content type object
      		 * @return {Promise} - returns response from Contentful API
       */


      /**
      		 * Formats raw response from Contentful
      		 * @param {Object} content - entries API response for a content type
      		 * @return {Promise} - returns formatted content type entries object
       */


      /**
      		 * Formats a single entry object from Contentful API response
      		 * @param {Object} e - single entry object from API response
      		 * @return {Promise} - returns formatted entry object
       */


      /**
      		 * Sets `_url` property on content with single entry views
      		 * @param {Array} types - content type objects
      		 * return {Promise} - promise when urls are set
       */


      /**
      		 * Builds locals object from types objects with content
      		 * @param {Array} types - populated content type objects
      		 * @return {Promise} - promise for when complete
       */


      /**
      		 * Compiles single entry views for content types
      		 * @param {Array} types - Populated content type objects
      		 * @return {Promise} - promise for when compilation is finished
       */


      /**
      		 * View helper for accessing the actual url from a Contentful asset
      		 * and appends any query string params
      		 * @param {Object} asset - Asset object returned from Contentful API
      		 * @param {Object} opts - Query string params to append to the URL
      		 * @return {String} - URL string for the asset
       */

      asset_view_helper = function(asset, params) {
        var base, url;
        if (asset == null) {
          asset = {};
        }
        if (asset.fields == null) {
          asset.fields = {};
        }
        if ((base = asset.fields).file == null) {
          base.file = {};
        }
        url = asset.fields.file.url;
        if (params) {
          return url + "?" + (querystring.stringify(params));
        } else {
          return url;
        }
      };

      return ContentfulPlugin;

    })(BasePlugin);
  };

}).call(this);
